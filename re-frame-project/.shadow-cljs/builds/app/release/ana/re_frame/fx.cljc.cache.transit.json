["^ ","~:output",["^ ","~:js","goog.provide('re_frame.fx');\nre_frame.fx.kind = new cljs.core.Keyword(null,\"fx\",\"fx\",-1237829572);\n/**\n * Register the given effect `handler` for the given `id`.\n * \n *   `id` is keyword, often namespaced.\n *   `handler` is a side-effecting function which takes a single argument and whose return\n *   value is ignored.\n * \n *   Example Use\n *   -----------\n * \n *   First, registration ... associate `:effect2` with a handler.\n * \n *   (reg-fx\n *   :effect2\n *   (fn [value]\n *      ... do something side-effect-y))\n * \n *   Then, later, if an event handler were to return this effects map ...\n * \n *   {...\n * :effect2  [1 2]}\n * \n * ... then the `handler` `fn` we registered previously, using `reg-fx`, will be\n * called with an argument of `[1 2]`.\n */\nre_frame.fx.reg_fx = (function re_frame$fx$reg_fx(id,handler){\nreturn re_frame.registrar.register_handler(re_frame.fx.kind,id,handler);\n});\n/**\n * An interceptor whose `:after` actions the contents of `:effects`. As a result,\n *   this interceptor is Domino 3.\n * \n *   This interceptor is silently added (by reg-event-db etc) to the front of\n *   interceptor chains for all events.\n * \n *   For each key in `:effects` (a map), it calls the registered `effects handler`\n *   (see `reg-fx` for registration of effect handlers).\n * \n *   So, if `:effects` was:\n *    {:dispatch  [:hello 42]\n *     :db        {...}\n *     :undo      \"set flag\"}\n * \n *   it will call the registered effect handlers for each of the map's keys:\n *   `:dispatch`, `:undo` and `:db`. When calling each handler, provides the map\n *   value for that key - so in the example above the effect handler for :dispatch\n *   will be given one arg `[:hello 42]`.\n * \n *   You cannot rely on the ordering in which effects are executed.\n */\nre_frame.fx.do_fx = re_frame.interceptor.__GT_interceptor.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),new cljs.core.Keyword(null,\"do-fx\",\"do-fx\",1194163050),new cljs.core.Keyword(null,\"after\",\"after\",594996914),(function re_frame$fx$do_fx_after(context){\nif(re_frame.trace.is_trace_enabled_QMARK_()){\nvar _STAR_current_trace_STAR__orig_val__21094 = re_frame.trace._STAR_current_trace_STAR_;\nvar _STAR_current_trace_STAR__temp_val__21095 = re_frame.trace.start_trace(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"op-type\",\"op-type\",-1636141668),new cljs.core.Keyword(\"event\",\"do-fx\",\"event/do-fx\",1357330452)], null));\nre_frame.trace._STAR_current_trace_STAR_ = _STAR_current_trace_STAR__temp_val__21095;\n\ntry{try{var seq__21097 = cljs.core.seq(new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292).cljs$core$IFn$_invoke$arity$1(context));\nvar chunk__21098 = null;\nvar count__21099 = (0);\nvar i__21100 = (0);\nwhile(true){\nif((i__21100 < count__21099)){\nvar vec__21122 = chunk__21098.cljs$core$IIndexed$_nth$arity$2(null,i__21100);\nvar effect_key = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__21122,(0),null);\nvar effect_value = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__21122,(1),null);\nvar temp__5718__auto___21189 = re_frame.registrar.get_handler.cljs$core$IFn$_invoke$arity$3(re_frame.fx.kind,effect_key,false);\nif(cljs.core.truth_(temp__5718__auto___21189)){\nvar effect_fn_21190 = temp__5718__auto___21189;\n(effect_fn_21190.cljs$core$IFn$_invoke$arity$1 ? effect_fn_21190.cljs$core$IFn$_invoke$arity$1(effect_value) : effect_fn_21190.call(null,effect_value));\n} else {\nre_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"error\",\"error\",-978969032),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"re-frame: no handler registered for effect:\",effect_key,\". Ignoring.\"], 0));\n}\n\n\nvar G__21191 = seq__21097;\nvar G__21192 = chunk__21098;\nvar G__21193 = count__21099;\nvar G__21194 = (i__21100 + (1));\nseq__21097 = G__21191;\nchunk__21098 = G__21192;\ncount__21099 = G__21193;\ni__21100 = G__21194;\ncontinue;\n} else {\nvar temp__5720__auto__ = cljs.core.seq(seq__21097);\nif(temp__5720__auto__){\nvar seq__21097__$1 = temp__5720__auto__;\nif(cljs.core.chunked_seq_QMARK_(seq__21097__$1)){\nvar c__4550__auto__ = cljs.core.chunk_first(seq__21097__$1);\nvar G__21195 = cljs.core.chunk_rest(seq__21097__$1);\nvar G__21196 = c__4550__auto__;\nvar G__21197 = cljs.core.count(c__4550__auto__);\nvar G__21198 = (0);\nseq__21097 = G__21195;\nchunk__21098 = G__21196;\ncount__21099 = G__21197;\ni__21100 = G__21198;\ncontinue;\n} else {\nvar vec__21129 = cljs.core.first(seq__21097__$1);\nvar effect_key = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__21129,(0),null);\nvar effect_value = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__21129,(1),null);\nvar temp__5718__auto___21199 = re_frame.registrar.get_handler.cljs$core$IFn$_invoke$arity$3(re_frame.fx.kind,effect_key,false);\nif(cljs.core.truth_(temp__5718__auto___21199)){\nvar effect_fn_21200 = temp__5718__auto___21199;\n(effect_fn_21200.cljs$core$IFn$_invoke$arity$1 ? effect_fn_21200.cljs$core$IFn$_invoke$arity$1(effect_value) : effect_fn_21200.call(null,effect_value));\n} else {\nre_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"error\",\"error\",-978969032),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"re-frame: no handler registered for effect:\",effect_key,\". Ignoring.\"], 0));\n}\n\n\nvar G__21201 = cljs.core.next(seq__21097__$1);\nvar G__21202 = null;\nvar G__21203 = (0);\nvar G__21204 = (0);\nseq__21097 = G__21201;\nchunk__21098 = G__21202;\ncount__21099 = G__21203;\ni__21100 = G__21204;\ncontinue;\n}\n} else {\nreturn null;\n}\n}\nbreak;\n}\n}finally {if(re_frame.trace.is_trace_enabled_QMARK_()){\nvar end__20614__auto___21206 = re_frame.interop.now();\nvar duration__20615__auto___21207 = (end__20614__auto___21206 - new cljs.core.Keyword(null,\"start\",\"start\",-355208981).cljs$core$IFn$_invoke$arity$1(re_frame.trace._STAR_current_trace_STAR_));\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(re_frame.trace.traces,cljs.core.conj,cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"duration\",\"duration\",1444101068),duration__20615__auto___21207,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"end\",\"end\",-268185958),re_frame.interop.now()], 0)));\n\nre_frame.trace.run_tracing_callbacks_BANG_(end__20614__auto___21206);\n} else {\n}\n}}finally {re_frame.trace._STAR_current_trace_STAR_ = _STAR_current_trace_STAR__orig_val__21094;\n}} else {\nvar seq__21132 = cljs.core.seq(new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292).cljs$core$IFn$_invoke$arity$1(context));\nvar chunk__21133 = null;\nvar count__21134 = (0);\nvar i__21135 = (0);\nwhile(true){\nif((i__21135 < count__21134)){\nvar vec__21145 = chunk__21133.cljs$core$IIndexed$_nth$arity$2(null,i__21135);\nvar effect_key = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__21145,(0),null);\nvar effect_value = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__21145,(1),null);\nvar temp__5718__auto___21208 = re_frame.registrar.get_handler.cljs$core$IFn$_invoke$arity$3(re_frame.fx.kind,effect_key,false);\nif(cljs.core.truth_(temp__5718__auto___21208)){\nvar effect_fn_21209 = temp__5718__auto___21208;\n(effect_fn_21209.cljs$core$IFn$_invoke$arity$1 ? effect_fn_21209.cljs$core$IFn$_invoke$arity$1(effect_value) : effect_fn_21209.call(null,effect_value));\n} else {\nre_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"error\",\"error\",-978969032),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"re-frame: no handler registered for effect:\",effect_key,\". Ignoring.\"], 0));\n}\n\n\nvar G__21210 = seq__21132;\nvar G__21211 = chunk__21133;\nvar G__21212 = count__21134;\nvar G__21213 = (i__21135 + (1));\nseq__21132 = G__21210;\nchunk__21133 = G__21211;\ncount__21134 = G__21212;\ni__21135 = G__21213;\ncontinue;\n} else {\nvar temp__5720__auto__ = cljs.core.seq(seq__21132);\nif(temp__5720__auto__){\nvar seq__21132__$1 = temp__5720__auto__;\nif(cljs.core.chunked_seq_QMARK_(seq__21132__$1)){\nvar c__4550__auto__ = cljs.core.chunk_first(seq__21132__$1);\nvar G__21214 = cljs.core.chunk_rest(seq__21132__$1);\nvar G__21215 = c__4550__auto__;\nvar G__21216 = cljs.core.count(c__4550__auto__);\nvar G__21217 = (0);\nseq__21132 = G__21214;\nchunk__21133 = G__21215;\ncount__21134 = G__21216;\ni__21135 = G__21217;\ncontinue;\n} else {\nvar vec__21149 = cljs.core.first(seq__21132__$1);\nvar effect_key = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__21149,(0),null);\nvar effect_value = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__21149,(1),null);\nvar temp__5718__auto___21220 = re_frame.registrar.get_handler.cljs$core$IFn$_invoke$arity$3(re_frame.fx.kind,effect_key,false);\nif(cljs.core.truth_(temp__5718__auto___21220)){\nvar effect_fn_21221 = temp__5718__auto___21220;\n(effect_fn_21221.cljs$core$IFn$_invoke$arity$1 ? effect_fn_21221.cljs$core$IFn$_invoke$arity$1(effect_value) : effect_fn_21221.call(null,effect_value));\n} else {\nre_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"error\",\"error\",-978969032),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"re-frame: no handler registered for effect:\",effect_key,\". Ignoring.\"], 0));\n}\n\n\nvar G__21222 = cljs.core.next(seq__21132__$1);\nvar G__21223 = null;\nvar G__21224 = (0);\nvar G__21225 = (0);\nseq__21132 = G__21222;\nchunk__21133 = G__21223;\ncount__21134 = G__21224;\ni__21135 = G__21225;\ncontinue;\n}\n} else {\nreturn null;\n}\n}\nbreak;\n}\n}\n})], 0));\nre_frame.fx.reg_fx(new cljs.core.Keyword(null,\"dispatch-later\",\"dispatch-later\",291951390),(function (value){\nvar seq__21152 = cljs.core.seq(cljs.core.remove.cljs$core$IFn$_invoke$arity$2(cljs.core.nil_QMARK_,value));\nvar chunk__21153 = null;\nvar count__21154 = (0);\nvar i__21155 = (0);\nwhile(true){\nif((i__21155 < count__21154)){\nvar map__21164 = chunk__21153.cljs$core$IIndexed$_nth$arity$2(null,i__21155);\nvar map__21164__$1 = (((((!((map__21164 == null))))?(((((map__21164.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__21164.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__21164):map__21164);\nvar effect = map__21164__$1;\nvar ms = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__21164__$1,new cljs.core.Keyword(null,\"ms\",\"ms\",-1152709733));\nvar dispatch = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__21164__$1,new cljs.core.Keyword(null,\"dispatch\",\"dispatch\",1319337009));\nif(((cljs.core.empty_QMARK_(dispatch)) || ((!(typeof ms === 'number'))))){\nre_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"error\",\"error\",-978969032),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"re-frame: ignoring bad :dispatch-later value:\",effect], 0));\n} else {\nre_frame.interop.set_timeout_BANG_(((function (seq__21152,chunk__21153,count__21154,i__21155,map__21164,map__21164__$1,effect,ms,dispatch){\nreturn (function (){\nreturn re_frame.router.dispatch(dispatch);\n});})(seq__21152,chunk__21153,count__21154,i__21155,map__21164,map__21164__$1,effect,ms,dispatch))\n,ms);\n}\n\n\nvar G__21236 = seq__21152;\nvar G__21237 = chunk__21153;\nvar G__21238 = count__21154;\nvar G__21239 = (i__21155 + (1));\nseq__21152 = G__21236;\nchunk__21153 = G__21237;\ncount__21154 = G__21238;\ni__21155 = G__21239;\ncontinue;\n} else {\nvar temp__5720__auto__ = cljs.core.seq(seq__21152);\nif(temp__5720__auto__){\nvar seq__21152__$1 = temp__5720__auto__;\nif(cljs.core.chunked_seq_QMARK_(seq__21152__$1)){\nvar c__4550__auto__ = cljs.core.chunk_first(seq__21152__$1);\nvar G__21244 = cljs.core.chunk_rest(seq__21152__$1);\nvar G__21245 = c__4550__auto__;\nvar G__21246 = cljs.core.count(c__4550__auto__);\nvar G__21247 = (0);\nseq__21152 = G__21244;\nchunk__21153 = G__21245;\ncount__21154 = G__21246;\ni__21155 = G__21247;\ncontinue;\n} else {\nvar map__21166 = cljs.core.first(seq__21152__$1);\nvar map__21166__$1 = (((((!((map__21166 == null))))?(((((map__21166.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__21166.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__21166):map__21166);\nvar effect = map__21166__$1;\nvar ms = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__21166__$1,new cljs.core.Keyword(null,\"ms\",\"ms\",-1152709733));\nvar dispatch = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__21166__$1,new cljs.core.Keyword(null,\"dispatch\",\"dispatch\",1319337009));\nif(((cljs.core.empty_QMARK_(dispatch)) || ((!(typeof ms === 'number'))))){\nre_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"error\",\"error\",-978969032),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"re-frame: ignoring bad :dispatch-later value:\",effect], 0));\n} else {\nre_frame.interop.set_timeout_BANG_(((function (seq__21152,chunk__21153,count__21154,i__21155,map__21166,map__21166__$1,effect,ms,dispatch,seq__21152__$1,temp__5720__auto__){\nreturn (function (){\nreturn re_frame.router.dispatch(dispatch);\n});})(seq__21152,chunk__21153,count__21154,i__21155,map__21166,map__21166__$1,effect,ms,dispatch,seq__21152__$1,temp__5720__auto__))\n,ms);\n}\n\n\nvar G__21250 = cljs.core.next(seq__21152__$1);\nvar G__21251 = null;\nvar G__21252 = (0);\nvar G__21253 = (0);\nseq__21152 = G__21250;\nchunk__21153 = G__21251;\ncount__21154 = G__21252;\ni__21155 = G__21253;\ncontinue;\n}\n} else {\nreturn null;\n}\n}\nbreak;\n}\n}));\nre_frame.fx.reg_fx(new cljs.core.Keyword(null,\"dispatch\",\"dispatch\",1319337009),(function (value){\nif((!(cljs.core.vector_QMARK_(value)))){\nreturn re_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"error\",\"error\",-978969032),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"re-frame: ignoring bad :dispatch value. Expected a vector, but got:\",value], 0));\n} else {\nreturn re_frame.router.dispatch(value);\n}\n}));\nre_frame.fx.reg_fx(new cljs.core.Keyword(null,\"dispatch-n\",\"dispatch-n\",-504469236),(function (value){\nif((!(cljs.core.sequential_QMARK_(value)))){\nreturn re_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"error\",\"error\",-978969032),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"re-frame: ignoring bad :dispatch-n value. Expected a collection, but got:\",value], 0));\n} else {\nvar seq__21171 = cljs.core.seq(cljs.core.remove.cljs$core$IFn$_invoke$arity$2(cljs.core.nil_QMARK_,value));\nvar chunk__21172 = null;\nvar count__21173 = (0);\nvar i__21174 = (0);\nwhile(true){\nif((i__21174 < count__21173)){\nvar event = chunk__21172.cljs$core$IIndexed$_nth$arity$2(null,i__21174);\nre_frame.router.dispatch(event);\n\n\nvar G__21254 = seq__21171;\nvar G__21255 = chunk__21172;\nvar G__21256 = count__21173;\nvar G__21257 = (i__21174 + (1));\nseq__21171 = G__21254;\nchunk__21172 = G__21255;\ncount__21173 = G__21256;\ni__21174 = G__21257;\ncontinue;\n} else {\nvar temp__5720__auto__ = cljs.core.seq(seq__21171);\nif(temp__5720__auto__){\nvar seq__21171__$1 = temp__5720__auto__;\nif(cljs.core.chunked_seq_QMARK_(seq__21171__$1)){\nvar c__4550__auto__ = cljs.core.chunk_first(seq__21171__$1);\nvar G__21258 = cljs.core.chunk_rest(seq__21171__$1);\nvar G__21259 = c__4550__auto__;\nvar G__21260 = cljs.core.count(c__4550__auto__);\nvar G__21261 = (0);\nseq__21171 = G__21258;\nchunk__21172 = G__21259;\ncount__21173 = G__21260;\ni__21174 = G__21261;\ncontinue;\n} else {\nvar event = cljs.core.first(seq__21171__$1);\nre_frame.router.dispatch(event);\n\n\nvar G__21262 = cljs.core.next(seq__21171__$1);\nvar G__21263 = null;\nvar G__21264 = (0);\nvar G__21265 = (0);\nseq__21171 = G__21262;\nchunk__21172 = G__21263;\ncount__21173 = G__21264;\ni__21174 = G__21265;\ncontinue;\n}\n} else {\nreturn null;\n}\n}\nbreak;\n}\n}\n}));\nre_frame.fx.reg_fx(new cljs.core.Keyword(null,\"deregister-event-handler\",\"deregister-event-handler\",-1096518994),(function (value){\nvar clear_event = cljs.core.partial.cljs$core$IFn$_invoke$arity$2(re_frame.registrar.clear_handlers,re_frame.events.kind);\nif(cljs.core.sequential_QMARK_(value)){\nvar seq__21179 = cljs.core.seq(value);\nvar chunk__21180 = null;\nvar count__21181 = (0);\nvar i__21182 = (0);\nwhile(true){\nif((i__21182 < count__21181)){\nvar event = chunk__21180.cljs$core$IIndexed$_nth$arity$2(null,i__21182);\n(clear_event.cljs$core$IFn$_invoke$arity$1 ? clear_event.cljs$core$IFn$_invoke$arity$1(event) : clear_event.call(null,event));\n\n\nvar G__21266 = seq__21179;\nvar G__21267 = chunk__21180;\nvar G__21268 = count__21181;\nvar G__21269 = (i__21182 + (1));\nseq__21179 = G__21266;\nchunk__21180 = G__21267;\ncount__21181 = G__21268;\ni__21182 = G__21269;\ncontinue;\n} else {\nvar temp__5720__auto__ = cljs.core.seq(seq__21179);\nif(temp__5720__auto__){\nvar seq__21179__$1 = temp__5720__auto__;\nif(cljs.core.chunked_seq_QMARK_(seq__21179__$1)){\nvar c__4550__auto__ = cljs.core.chunk_first(seq__21179__$1);\nvar G__21270 = cljs.core.chunk_rest(seq__21179__$1);\nvar G__21271 = c__4550__auto__;\nvar G__21272 = cljs.core.count(c__4550__auto__);\nvar G__21273 = (0);\nseq__21179 = G__21270;\nchunk__21180 = G__21271;\ncount__21181 = G__21272;\ni__21182 = G__21273;\ncontinue;\n} else {\nvar event = cljs.core.first(seq__21179__$1);\n(clear_event.cljs$core$IFn$_invoke$arity$1 ? clear_event.cljs$core$IFn$_invoke$arity$1(event) : clear_event.call(null,event));\n\n\nvar G__21274 = cljs.core.next(seq__21179__$1);\nvar G__21275 = null;\nvar G__21276 = (0);\nvar G__21277 = (0);\nseq__21179 = G__21274;\nchunk__21180 = G__21275;\ncount__21181 = G__21276;\ni__21182 = G__21277;\ncontinue;\n}\n} else {\nreturn null;\n}\n}\nbreak;\n}\n} else {\nreturn (clear_event.cljs$core$IFn$_invoke$arity$1 ? clear_event.cljs$core$IFn$_invoke$arity$1(value) : clear_event.call(null,value));\n}\n}));\nre_frame.fx.reg_fx(new cljs.core.Keyword(null,\"db\",\"db\",993250759),(function (value){\nif((!((cljs.core.deref(re_frame.db.app_db) === value)))){\nreturn cljs.core.reset_BANG_(re_frame.db.app_db,value);\n} else {\nreturn null;\n}\n}));\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","re_frame/fx.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",16],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$react","~$module$node_modules$react$index","~$react-dom","~$module$node_modules$react_dom$index"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$re-frame.fx","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$re-frame.interop","^K","~$re-frame.interceptor","^L","~$re-frame.events","^M","~$re-frame.trace","^N","~$re-frame.registrar","^O","~$cljs.core","^P","~$goog","^Q","~$router","~$re-frame.router","^S","^S","~$trace","^N","~$events","^M","~$re-frame.loggers","^V","~$re-frame.db","^W"],"~:seen",["^D",["~:require"]],"~:uses",["^ ","~$app-db","^W","~$->interceptor","^L","~$set-timeout!","^K","~$get-handler","^O","~$clear-handlers","^O","~$register-handler","^O","~$console","^V"],"~:require-macros",["^ ","^N","^N","^T","^N","^P","^P"],"~:form",["~#list",["~$ns","^F",["^18",["^Y",["^S","~:as","^R"],["^W","~:refer",["^["]],["^L","^1;",["^10"]],["^K","^1;",["^11"]],["^M","^1:","^U"],["^O","^1;",["^12","^13","^14"]],["^V","^1;",["^15"]],["^N","^1:","^T","~:include-macros",true]]]]],"~:flags",["^ ","^Y",["^D",[]]],"~:js-deps",["^ "],"~:deps",["^Q","^P","^S","^W","^L","^K","^M","^O","^V","^N"]],"^H","^F","~:resource-id",["~:shadow.build.classpath/resource","re_frame/fx.cljc"],"~:compiled-at",1586693310028,"~:resource-name","re_frame/fx.cljc","~:warnings",[],"~:source","(ns re-frame.fx\n  (:require\n    [re-frame.router      :as router]\n    [re-frame.db          :refer [app-db]]\n    [re-frame.interceptor :refer [->interceptor]]\n    [re-frame.interop     :refer [set-timeout!]]\n    [re-frame.events      :as events]\n    [re-frame.registrar   :refer [get-handler clear-handlers register-handler]]\n    [re-frame.loggers     :refer [console]]\n    [re-frame.trace :as trace :include-macros true]))\n\n\n;; -- Registration ------------------------------------------------------------\n\n(def kind :fx)\n(assert (re-frame.registrar/kinds kind))\n\n(defn reg-fx\n  \"Register the given effect `handler` for the given `id`.\n\n  `id` is keyword, often namespaced.\n  `handler` is a side-effecting function which takes a single argument and whose return\n  value is ignored.\n\n  Example Use\n  -----------\n\n  First, registration ... associate `:effect2` with a handler.\n\n  (reg-fx\n     :effect2\n     (fn [value]\n        ... do something side-effect-y))\n\n  Then, later, if an event handler were to return this effects map ...\n\n  {...\n   :effect2  [1 2]}\n\n   ... then the `handler` `fn` we registered previously, using `reg-fx`, will be\n   called with an argument of `[1 2]`.\"\n  [id handler]\n  (register-handler kind id handler))\n\n;; -- Interceptor -------------------------------------------------------------\n\n(def do-fx\n  \"An interceptor whose `:after` actions the contents of `:effects`. As a result,\n  this interceptor is Domino 3.\n\n  This interceptor is silently added (by reg-event-db etc) to the front of\n  interceptor chains for all events.\n\n  For each key in `:effects` (a map), it calls the registered `effects handler`\n  (see `reg-fx` for registration of effect handlers).\n\n  So, if `:effects` was:\n      {:dispatch  [:hello 42]\n       :db        {...}\n       :undo      \\\"set flag\\\"}\n\n  it will call the registered effect handlers for each of the map's keys:\n  `:dispatch`, `:undo` and `:db`. When calling each handler, provides the map\n  value for that key - so in the example above the effect handler for :dispatch\n  will be given one arg `[:hello 42]`.\n\n  You cannot rely on the ordering in which effects are executed.\"\n  (->interceptor\n    :id :do-fx\n    :after (fn do-fx-after\n             [context]\n             (trace/with-trace\n               {:op-type :event/do-fx}\n               (doseq [[effect-key effect-value] (:effects context)]\n                 (if-let [effect-fn (get-handler kind effect-key false)]\n                   (effect-fn effect-value)\n                   (console :error \"re-frame: no handler registered for effect:\" effect-key \". Ignoring.\")))))))\n\n;; -- Builtin Effect Handlers  ------------------------------------------------\n\n;; :dispatch-later\n;;\n;; `dispatch` one or more events after given delays. Expects a collection\n;; of maps with two keys:  :`ms` and `:dispatch`\n;;\n;; usage:\n;;\n;;    {:dispatch-later [{:ms 200 :dispatch [:event-id \"param\"]}    ;;  in 200ms do this: (dispatch [:event-id \"param\"])\n;;                      {:ms 100 :dispatch [:also :this :in :100ms]}]}\n;;\n;; Note: nil entries in the collection are ignored which means events can be added\n;; conditionally:\n;;    {:dispatch-later [ (when (> 3 5) {:ms 200 :dispatch [:conditioned-out]})\n;;                       {:ms 100 :dispatch [:another-one]}]}\n;;\n(reg-fx\n  :dispatch-later\n  (fn [value]\n    (doseq [{:keys [ms dispatch] :as effect} (remove nil? value)]\n        (if (or (empty? dispatch) (not (number? ms)))\n          (console :error \"re-frame: ignoring bad :dispatch-later value:\" effect)\n          (set-timeout! #(router/dispatch dispatch) ms)))))\n\n\n;; :dispatch\n;;\n;; `dispatch` one event. Expects a single vector.\n;;\n;; usage:\n;;   {:dispatch [:event-id \"param\"] }\n\n(reg-fx\n  :dispatch\n  (fn [value]\n    (if-not (vector? value)\n      (console :error \"re-frame: ignoring bad :dispatch value. Expected a vector, but got:\" value)\n      (router/dispatch value))))\n\n\n;; :dispatch-n\n;;\n;; `dispatch` more than one event. Expects a list or vector of events. Something for which\n;; sequential? returns true.\n;;\n;; usage:\n;;   {:dispatch-n (list [:do :all] [:three :of] [:these])}\n;;\n;; Note: nil events are ignored which means events can be added\n;; conditionally:\n;;    {:dispatch-n (list (when (> 3 5) [:conditioned-out])\n;;                       [:another-one])}\n;;\n(reg-fx\n  :dispatch-n\n  (fn [value]\n    (if-not (sequential? value)\n      (console :error \"re-frame: ignoring bad :dispatch-n value. Expected a collection, but got:\" value)\n      (doseq [event (remove nil? value)] (router/dispatch event)))))\n\n\n;; :deregister-event-handler\n;;\n;; removes a previously registered event handler. Expects either a single id (\n;; typically a namespaced keyword), or a seq of ids.\n;;\n;; usage:\n;;   {:deregister-event-handler :my-id)}\n;; or:\n;;   {:deregister-event-handler [:one-id :another-id]}\n;;\n(reg-fx\n  :deregister-event-handler\n  (fn [value]\n    (let [clear-event (partial clear-handlers events/kind)]\n      (if (sequential? value)\n        (doseq [event value] (clear-event event))\n        (clear-event value)))))\n\n\n;; :db\n;;\n;; reset! app-db with a new value. `value` is expected to be a map.\n;;\n;; usage:\n;;   {:db  {:key1 value1 key2 value2}}\n;;\n(reg-fx\n  :db\n  (fn [value]\n    (if-not (identical? @app-db value)\n      (reset! app-db value))))\n\n","~:reader-features",["^D",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["re-frame.fx/kind","re-frame.fx/reg-fx","id","handler","re-frame.registrar/register-handler","re-frame.fx/do-fx","re_frame.interceptor.__GT_interceptor.cljs$core$IFn$_invoke$arity$variadic","context","re-frame.trace/is-trace-enabled?","*current-trace*-orig-val__21094","re-frame.trace/*current-trace*","*current-trace*-temp-val__21095","re-frame.trace/start-trace","end__20614__auto__","re-frame.interop/now","duration__20615__auto__","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3","re-frame.trace/traces","cljs.core/conj","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic","re-frame.trace/run-tracing-callbacks!","seq__21097","cljs.core/seq","chunk__21098","count__21099","i__21100","vec__21122","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","temp__5720__auto__","cljs.core/chunked-seq?","c__4550__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","vec__21129","cljs.core/first","cljs.core/next","seq__21132","chunk__21133","count__21134","i__21135","vec__21145","vec__21149","effect-key","effect-value","temp__5718__auto__","effect-fn","re_frame.registrar.get_handler.cljs$core$IFn$_invoke$arity$3","re_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic","value","seq__21152","chunk__21153","count__21154","i__21155","map__21164","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","map__21166","ms","dispatch","effect","cljs.core.remove.cljs$core$IFn$_invoke$arity$2","cljs.core/nil?","cljs.core/empty?","re-frame.interop/set-timeout!","re-frame.router/dispatch","cljs.core/vector?","cljs.core/sequential?","seq__21171","chunk__21172","count__21173","i__21174","event","clear-event","cljs.core.partial.cljs$core$IFn$_invoke$arity$2","re-frame.registrar/clear-handlers","re-frame.events/kind","seq__21179","chunk__21180","count__21181","i__21182","cljs.core/deref","re-frame.db/app-db","cljs.core/reset!"]]],"~:cache-keys",["~#cmap",[["~:shadow.build.npm/resource","node_modules/react-dom/index.js"],[1584816509000,1584816509000,499162500000,"~:shadow.build.compiler/resolve",["^ ","~:require-id",14,"~:deps-ids",["^D",[13,9]],"~:deps-syms",["~$shadow.js","~$module$node_modules$react_dom$cjs$react_dom_production_min","~$module$node_modules$react_dom$cjs$react_dom_development"]]],["^1A","reagent/impl/batching.cljs"],[1584816509778,"^1O",["^ ","^1P",null,"^1Q",["^D",[]],"^1R",["^Q","^P","~$reagent.debug","~$reagent.impl.util"]]],["^1A","goog/dom/tagname.js"],[1584816508062,"^1O",["^ ","^1P",null,"^1Q",["^D",[]],"^1R",["^Q","~$goog.dom.HtmlElement"]]],["~:macro","^P"],[1584816509000],["^1A","goog/math/math.js"],[1584816508062,"^1O",["^ ","^1P",null,"^1Q",["^D",[]],"^1R",["^Q","~$goog.array","~$goog.asserts"]]],["^1A","goog/labs/useragent/browser.js"],[1584816508062,"^1O",["^ ","^1P",null,"^1Q",["^D",[]],"^1R",["^Q","^1Z","~$goog.labs.userAgent.util","~$goog.object","~$goog.string.internal"]]],["^1A","re_frame/loggers.cljc"],[1584818247227,"^1O",["^ ","^1P",null,"^1Q",["^D",[]],"^1R",["^Q","^P","~$clojure.set"]]],["^1Y","^1V"],[1584816509000],["^1A","goog/array/array.js"],[1584816508062,"^1O",["^ ","^1P",null,"^1Q",["^D",[]],"^1R",["^Q","^1["]]],["^1N","node_modules/prop-types/checkPropTypes.js"],[1584816509000,1584816509000,1584816236127,"^1O",["^ ","^1P",3,"^1Q",["^D",[2]],"^1R",["^1S","~$module$node_modules$prop_types$lib$ReactPropTypesSecret"]]],["^1A","reagent/impl/util.cljs"],[1584816509778,"^1O",["^ ","^1P",null,"^1Q",["^D",[]],"^1R",["^Q","^P","^1V","~$clojure.string"]]],["^1A","re_frame/router.cljc"],[1584818247227,"^1O",["^ ","^1P",null,"^1Q",["^D",[]],"^1R",["^Q","^P","^M","^K","^V","^N"]]],["^1Y","~$net.cgrand.macrovich"],[1584816509000],["^1A","goog/debug/error.js"],[1584816508062,"^1O",["^ ","^1P",null,"^1Q",["^D",[]],"^1R",["^Q"]]],["^1A","re_frame/registrar.cljc"],[1584818247227,"^1O",["^ ","^1P",null,"^1Q",["^D",[]],"^1R",["^Q","^P","^K","^V"]]],["^1A","goog/dom/nodetype.js"],[1584816508062,"^1O",["^ ","^1P",null,"^1Q",["^D",[]],"^1R",["^Q"]]],["^1Y","~$reagent.core"],[1584816509000],["^1N","node_modules/scheduler/cjs/scheduler.development.js"],[1584816509000,1584816509000,1584816236152,"^1O",["^ ","^1P",7,"^1Q",["^D",[]],"^1R",["^1S"]]],["^1A","reagent/ratom.cljs"],[1584816509778,"^1O",["^ ","^1P",null,"^1Q",["^D",[]],"^1R",["^Q","^P","^1W","^1V","~$reagent.impl.batching","^23","^21"]]],["^1N","node_modules/scheduler/cjs/scheduler.production.min.js"],[1584816509000,1584816509000,1584816236152,"^1O",["^ ","^1P",6,"^1Q",["^D",[]],"^1R",["^1S"]]],["^1A","re_frame/interop.cljs"],[1584818247227,"^1O",["^ ","^1P",null,"^1Q",["^D",[]],"^1R",["^Q","^P","~$goog.async.nextTick","^27","~$reagent.ratom"]]],["^1N","node_modules/scheduler/cjs/scheduler-tracing.production.min.js"],[1584816509000,1584816509000,1584816236151,"^1O",["^ ","^1P",10,"^1Q",["^D",[]],"^1R",["^1S"]]],["^1N","node_modules/react/index.js"],[1584816509000,1584816509000,499162500000,"^1O",["^ ","^1P",5,"^1Q",["^D",[1,4]],"^1R",["^1S","~$module$node_modules$react$cjs$react_production_min","~$module$node_modules$react$cjs$react_development"]]],["^1A","shadow/js.js"],[1584816509272,"^1O",["^ ","^1P",null,"^1Q",["^D",[]],"^1R",["^Q"]]],["^1A","goog/object/object.js"],[1584816508062,"^1O",["^ ","^1P",null,"^1Q",["^D",[]],"^1R",["^Q"]]],["^1A","reagent/impl/template.cljs"],[1584816509778,"^1O",["^ ","^1P",null,"^1Q",["^D",[5]],"^1R",["^Q","^P","^?","^25","~$clojure.walk","^1W","~$reagent.impl.component","^28","^2:","^1V","^21"]]],["^1N","node_modules/react-dom/cjs/react-dom.production.min.js"],[1584816509000,1584816509000,499162500000,"^1O",["^ ","^1P",9,"^1Q",["^D",[0,5,8]],"^1R",["^1S","^?","~$module$node_modules$object_assign$index","~$module$node_modules$scheduler$index"]]],"~:SHADOW-TIMESTAMP",[1584816509000,1584816509000],["^1N","node_modules/react/cjs/react.development.js"],[1584816509000,1584816509000,499162500000,"^1O",["^ ","^1P",4,"^1Q",["^D",[0,3]],"^1R",["^1S","^2?","~$module$node_modules$prop_types$checkPropTypes"]]],["^1Y","^2:"],[1584816509000],["^1A","re_frame/events.cljc"],[1584818247227,"^1O",["^ ","^1P",null,"^1Q",["^D",[]],"^1R",["^Q","^P","^W","~$re-frame.utils","^K","^O","^V","^L","^N"]]],["^1A","goog/math/long.js"],[1584816508062,"^1O",["^ ","^1P",null,"^1Q",["^D",[]],"^1R",["^Q","^1[","~$goog.reflect"]]],["^1A","goog/string/internal.js"],[1584816508062,"^1O",["^ ","^1P",null,"^1Q",["^D",[]],"^1R",["^Q"]]],["^1N","node_modules/scheduler/cjs/scheduler-tracing.development.js"],[1584816509000,1584816509000,1584816236151,"^1O",["^ ","^1P",11,"^1Q",["^D",[]],"^1R",["^1S"]]],["^1A","goog/functions/functions.js"],[1584816508062,"^1O",["^ ","^1P",null,"^1Q",["^D",[]],"^1R",["^Q"]]],["^1A","reagent/impl/component.cljs"],[1584816509778,"^1O",["^ ","^1P",null,"^1Q",["^D",[5]],"^1R",["^Q","^P","^21","^?","^1W","^28","^2:","^1V"]]],["^1A","clojure/walk.cljs"],[1584816509580,"^1O",["^ ","^1P",null,"^1Q",["^D",[]],"^1R",["^Q","^P"]]],["^1A","goog/structs/map.js"],[1584816508062,"^1O",["^ ","^1P",null,"^1Q",["^D",[]],"^1R",["^Q","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^1N","node_modules/scheduler/index.js"],[1584816509000,1584816509000,1584816236152,"^1O",["^ ","^1P",8,"^1Q",["^D",[7,6]],"^1R",["^1S","~$module$node_modules$scheduler$cjs$scheduler_production_min","~$module$node_modules$scheduler$cjs$scheduler_development"]]],["^1A","goog/labs/useragent/engine.js"],[1584816508062,"^1O",["^ ","^1P",null,"^1Q",["^D",[]],"^1R",["^Q","^1Z","^20","~$goog.string"]]],["^1A","goog/asserts/asserts.js"],[1584816508062,"^1O",["^ ","^1P",null,"^1Q",["^D",[]],"^1R",["^Q","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^1A","goog/uri/uri.js"],[1584816508062,"^1O",["^ ","^1P",null,"^1Q",["^D",[]],"^1R",["^Q","^1Z","^1[","^2I","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^1N","node_modules/object-assign/index.js"],[1584816509000,1584816509000,1584816236125,"^1O",["^ ","^1P",0,"^1Q",["^D",[]],"^1R",["^1S"]]],["^1A","re_frame/db.cljc"],[1584818247227,"^1O",["^ ","^1P",null,"^1Q",["^D",[]],"^1R",["^Q","^P","^K"]]],["^1A","goog/base.js"],[1584816508062,"^1O",["^ ","^1P",null,"^1Q",["^D",[]],"^1R",[]]],["^1A","goog/structs/structs.js"],[1584816508062,"^1O",["^ ","^1P",null,"^1Q",["^D",[]],"^1R",["^Q","^1Z","^21"]]],["^1A","clojure/string.cljs"],[1584816509580,"^1O",["^ ","^1P",null,"^1Q",["^D",[]],"^1R",["^Q","^P","^2I","~$goog.string.StringBuffer"]]],["^1N","node_modules/react/cjs/react.production.min.js"],[1584816509000,1584816509000,499162500000,"^1O",["^ ","^1P",1,"^1Q",["^D",[0]],"^1R",["^1S","^2?"]]],["^1A","goog/debug/entrypointregistry.js"],[1584816508062,"^1O",["^ ","^1P",null,"^1Q",["^D",[]],"^1R",["^Q","^1["]]],["^1A","goog/string/string.js"],[1584816508062,"^1O",["^ ","^1P",null,"^1Q",["^D",[]],"^1R",["^Q","^22"]]],["^1A","re_frame/interceptor.cljc"],[1584818247227,"^1O",["^ ","^1P",null,"^1Q",["^D",[]],"^1R",["^Q","^P","^V","^K","^N","^23"]]],["^1A","goog/reflect/reflect.js"],[1584816508062,"^1O",["^ ","^1P",null,"^1Q",["^D",[]],"^1R",["^Q"]]],["^1A","goog/labs/useragent/util.js"],[1584816508062,"^1O",["^ ","^1P",null,"^1Q",["^D",[]],"^1R",["^Q","^22"]]],["^1A","reagent/core.cljs"],[1584816509778,"^1O",["^ ","^1P",null,"^1Q",["^D",[5]],"^1R",["^Q","^P","^?","~$reagent.impl.template","^2>","^1W","^28","^2:","^1V","~$reagent.dom"]]],["^1A","goog/string/stringbuffer.js"],[1584816508062,"^1O",["^ ","^1P",null,"^1Q",["^D",[]],"^1R",["^Q"]]],["^1A","goog/iter/iter.js"],[1584816508062,"^1O",["^ ","^1P",null,"^1Q",["^D",[]],"^1R",["^Q","^1Z","^1[","~$goog.functions","~$goog.math"]]],["^1A","goog/async/nexttick.js"],[1584816508062,"^1O",["^ ","^1P",null,"^1Q",["^D",[]],"^1R",["^Q","~$goog.debug.entryPointRegistry","~$goog.dom.TagName","^2T","~$goog.labs.userAgent.browser","~$goog.labs.userAgent.engine"]]],["^1A","re_frame/utils.cljc"],[1584818247227,"^1O",["^ ","^1P",null,"^1Q",["^D",[]],"^1R",["^Q","^P","^V"]]],["^1A","reagent/dom.cljs"],[1584816509778,"^1O",["^ ","^1P",null,"^1Q",["^D",[14]],"^1R",["^Q","^P","^A","^1W","^2R","^28","^2:","^1V"]]],["^1A","re_frame/fx.cljc"],[1584818247227,"^1O",["^ ","^1P",null,"^1Q",["^D",[]],"^1R",["^Q","^P","^S","^W","^L","^K","^M","^O","^V","^N"]]],["^1N","node_modules/prop-types/lib/ReactPropTypesSecret.js"],[1584816509000,1584816509000,1584816236128,"^1O",["^ ","^1P",2,"^1Q",["^D",[]],"^1R",["^1S"]]],["^1A","goog/dom/htmlelement.js"],[1584816508062,"^1O",["^ ","^1P",null,"^1Q",["^D",[]],"^1R",["^Q"]]],["^1A","cljs/core.cljs"],[1584816509580,"^1O",["^ ","^1P",null,"^1Q",["^D",[]],"^1R",["~$goog.math.Long","~$goog.math.Integer","^2I","^21","^1Z","~$goog.Uri","^2Q"]]],["^1A","reagent/debug.cljs"],[1584816509778,"^1O",["^ ","^1P",null,"^1Q",["^D",[]],"^1R",["^Q","^P"]]],["^1Y","^N"],[1584818247000],["^1A","goog/math/integer.js"],[1584816508062,"^1O",["^ ","^1P",null,"^1Q",["^D",[]],"^1R",["^Q"]]],["^1N","node_modules/scheduler/tracing.js"],[1584816509000,1584816509000,1584816236153,"^1O",["^ ","^1P",12,"^1Q",["^D",[11,10]],"^1R",["^1S","~$module$node_modules$scheduler$cjs$scheduler_tracing_production_min","~$module$node_modules$scheduler$cjs$scheduler_tracing_development"]]],["^1N","node_modules/react-dom/cjs/react-dom.development.js"],[1584816509000,1584816509000,499162500000,"^1O",["^ ","^1P",13,"^1Q",["^D",[0,3,12,5,8]],"^1R",["^1S","^?","^2?","^2B","^2@","~$module$node_modules$scheduler$tracing"]]],["^1A","clojure/set.cljs"],[1584816509580,"^1O",["^ ","^1P",null,"^1Q",["^D",[]],"^1R",["^Q","^P"]]],["^1A","goog/uri/utils.js"],[1584816508062,"^1O",["^ ","^1P",null,"^1Q",["^D",[]],"^1R",["^Q","^1Z","^1[","^2I"]]],["^1A","re_frame/trace.cljc"],[1584818247227,"^1O",["^ ","^1P",null,"^1Q",["^D",[]],"^1R",["^Q","^P","^K","^V","^2T"]]]]],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","re_frame/fx.cljc","^7",1,"^8",5,"^9",1,"^:",16],"^;",["^ ","^<","^=","^>","^?","^@","^A"],"^B",null,"^C",["^D",[]],"^E","^F","^I",null,"^J",["^ ","^K","^K","^L","^L","^M","^M","^N","^N","^O","^O","^P","^P","^Q","^Q","^R","^S","^S","^S","^T","^N","^U","^M","^V","^V","^W","^W"],"^X",["^D",["^Y"]],"^Z",["^ ","^[","^W","^10","^L","^11","^K","^12","^O","^13","^O","^14","^O","^15","^V"],"~:defs",["^ ","~$kind",["^ ","^E","~$re-frame.fx/kind","^6","re_frame/fx.cljc","^7",15,"^8",1,"^9",15,"^:",10,"^5",["^ ","^6","re_frame/fx.cljc","^7",15,"^8",6,"^9",15,"^:",10],"~:tag","~$cljs.core/Keyword"],"~$reg-fx",["^ ","~:protocol-inline",null,"^5",["^ ","^6","re_frame/fx.cljc","^7",18,"^8",7,"^9",18,"^:",13,"~:arglists",["^18",["~$quote",["^18",[["~$id","~$handler"]]]]],"~:doc","Register the given effect `handler` for the given `id`.\n\n  `id` is keyword, often namespaced.\n  `handler` is a side-effecting function which takes a single argument and whose return\n  value is ignored.\n\n  Example Use\n  -----------\n\n  First, registration ... associate `:effect2` with a handler.\n\n  (reg-fx\n     :effect2\n     (fn [value]\n        ... do something side-effect-y))\n\n  Then, later, if an event handler were to return this effects map ...\n\n  {...\n   :effect2  [1 2]}\n\n   ... then the `handler` `fn` we registered previously, using `reg-fx`, will be\n   called with an argument of `[1 2]`."],"^E","~$re-frame.fx/reg-fx","^6","re_frame/fx.cljc","^:",13,"~:method-params",["^18",[["^3>","^3?"]]],"~:protocol-impl",null,"~:arglists-meta",["^18",[null,null]],"^8",1,"~:variadic?",false,"^7",18,"~:ret-tag","~$any","^9",18,"~:max-fixed-arity",2,"~:fn-var",true,"^3<",["^18",["^3=",["^18",[["^3>","^3?"]]]]],"^3@","Register the given effect `handler` for the given `id`.\n\n  `id` is keyword, often namespaced.\n  `handler` is a side-effecting function which takes a single argument and whose return\n  value is ignored.\n\n  Example Use\n  -----------\n\n  First, registration ... associate `:effect2` with a handler.\n\n  (reg-fx\n     :effect2\n     (fn [value]\n        ... do something side-effect-y))\n\n  Then, later, if an event handler were to return this effects map ...\n\n  {...\n   :effect2  [1 2]}\n\n   ... then the `handler` `fn` we registered previously, using `reg-fx`, will be\n   called with an argument of `[1 2]`."],"~$do-fx",["^ ","^5",["^ ","^6","re_frame/fx.cljc","^7",47,"^8",6,"^9",47,"^:",11],"^E","~$re-frame.fx/do-fx","^6","re_frame/fx.cljc","^:",11,"^8",1,"^7",47,"^9",47,"^38","~$cljs.core/IMap","^3@","An interceptor whose `:after` actions the contents of `:effects`. As a result,\n  this interceptor is Domino 3.\n\n  This interceptor is silently added (by reg-event-db etc) to the front of\n  interceptor chains for all events.\n\n  For each key in `:effects` (a map), it calls the registered `effects handler`\n  (see `reg-fx` for registration of effect handlers).\n\n  So, if `:effects` was:\n      {:dispatch  [:hello 42]\n       :db        {...}\n       :undo      \"set flag\"}\n\n  it will call the registered effect handlers for each of the map's keys:\n  `:dispatch`, `:undo` and `:db`. When calling each handler, provides the map\n  value for that key - so in the example above the effect handler for :dispatch\n  will be given one arg `[:hello 42]`.\n\n  You cannot rely on the ordering in which effects are executed."]],"^16",["^ ","^N","^N","^T","^N","^P","^P"],"~:cljs.analyzer/constants",["^ ","^X",["^D",["~:db","~:do-fx","~:start","~:dispatch-n","~:duration","~:deregister-event-handler","~:dispatch","~:after","~:event/do-fx","~:id","~:effects","~:error","~:end","~:ms","~:fx","~:op-type","~:dispatch-later"]],"~:order",["^40","^3W","^3O","^3U","^41","^3V","^3P","^3R","^3Z","^3X","^3Y","^42","^3[","^3T","^3Q","^3S","^3N"]],"^1=",["^ ","^Y",["^D",[]]],"^1>",["^ "],"^1?",["^Q","^P","^S","^W","^L","^K","^M","^O","^V","^N"]],"^H","^F","~:ns-specs",["^ "],"~:ns-speced-vars",[],"~:compiler-options",["^1M",[["^46","~:static-fns"],true,["^46","~:elide-asserts"],true,["^46","~:optimize-constants"],null,["^46","^1D"],null,["^46","~:external-config"],null,["^46","~:tooling-config"],null,["^46","~:emit-constants"],null,["^46","~:load-tests"],false,["^46","~:infer-externs"],true,["^46","^1F"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:release",["^46","~:fn-invoke-direct"],null,["^46","~:source-map"],null]]]