{"version":3,"sources":["re_frame_project/view/components/button.cljs"],"mappings":";;;;AAIA,AAAA,AAAMA,AACHC,AAAYC,AAAQC;AADvB,AAEE,AAAAC,AAAOQ;AAAPP,AAASJ;AAAT,AAAA,AAAA,AAAAK,AAAA;AAAAC,AAAAF;AAAA,AAAA,AAAAD,AAAAA,AAAAE,AAAAC,AAAAH,AAAAE,AAAAC;;AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAiBgC,AAAA,AAAA,AAAA,AAAA,AAAA,AACEL,AACAC;AAEF,AAAA,AAAA,AACED,AAAQe,AACRd,AAAQa,AACFA;AAxBxC,AAAA,AAAA,AASgC,AAAA,AAAA,AACEd,AAAQY,AACRX,AAAQY,AACFA;AAZxC,AAAA,AAAA,AAagC,AAAA,AAAA,AACEb,AAAQY,AACRX,AAAQa,AACFA;AAbRH;;AAHhC,AAAA,AAAAL,AAAA;AAAAC,AAAAJ;AAAA,AAAA,AAAAD,AAAAA,AAAAI,AAAAC,AAAAL,AAAAI,AAAAC;;AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAqCgC,AAAA,AAAA,AAAA,AAAA,AAAA,AACEP,AACAC;AAvClC,AAAA,AAAA,AAiCgC,AAAA,AACED,AAAQgB,AACFC,AAMRE;AAzChC,AAAA,AAAA,AA2BgCR,AASAO;;AApChC,AAAA,AAAAV,AAAA;AAAAC,AAAAN;AAAA,AAAA,AAAAD,AAAAA,AAAAM,AAAAC,AAAAP,AAAAM,AAAAC;;AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AA2C6BU,AAQA,AAAA,AAAA,AACEnB,AAAQiB,AACRhB,AAAQc,AACFD;AAtDrC,AAAA,AAAA,AA6C6BH;;AA7C7B,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AA0DqBQ,AAQA,AAAA,AAAA,AACEnB,AAAQiB,AACRhB,AAAQc,AACFD;AArE7B,AAAA,AA4DqBH;;;;;AAWvB,AAAA,AAAMS,AAAQC;AAAd,AACE,AAAMC,AAAiB,AAAA,AAAA,AAAA,AAAA,AAAA,AAACC;AAAxB,AAEE;AAAAC;AAAA,AAAA,AAAAC,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAA,AAAAI,AAAAJ,AAAA,AAAMK;AAAN,AAAAD,AAAAJ,AAAA,AAAmBM;AAAnB,AAAAF,AAAAJ,AAAA,AAAsCO;AAAtC,AAAAH,AAAAJ,AAAA,AAAiD1B;AAAjD,AACE,AAAMkC,AAAY,AAACC,AAAMZ;AAAzB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAKkC;;AAAA,AAAO,AAAA,AAAA,AAACgB,AAAMhB,AAAiBiB;;AAFrC;AAAKJ;AAAL,AAAQ,AAACC,AAAeD;;AACzB;;AAAA,AAAO,AAAA,AAACE;;AAHjB,AAAA,AAAIL,AAAKA,AAMM;;AAAA,AAAO,AAAA,AAAA,AAACM,AAAMhB,AAAiBiB;;AAL7C,AAACzC,AAAUC,AAAY,AAAA,AAAUkC,AAAa,AAAA,AAAUA,AAM5C,AACHF;;AADG,AAAO,AAAA,AAAA,AAACO,AAAMhB,AAAiBiB;;AAF5B;;AAAA,AAAO,AAAA,AAAA,AAACD,AAAMhB,AAAiBiB;;AAG3BT","names":["re-frame-project.view.components.button/get-style","button-type","pressed","hovered","pred__51720","expr__51721","G__51723","G__51724","G__51728","G__51729","G__51730","G__51731","cljs.core/=","re-frame-project.view.style/font","re-frame-project.view.style/light-blue","re-frame-project.view.style/transparent","re-frame-project.view.style/navy","re-frame-project.view.style/dark-blue","re-frame-project.view.style/red","re-frame-project.view.style/darker-red","re-frame-project.view.style/darkest-red","re-frame-project.view.style/white","re-frame-project.view.components.button/button","arg-map","local-state-atom","reagent.core.atom.cljs$core$IFn$_invoke$arity$1","p__51751","map__51752","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","label","on-click","type","local-state","cljs.core/deref","e","js/console.log","cljs.core.println.cljs$core$IFn$_invoke$arity$variadic","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc"],"sourcesContent":["(ns re-frame-project.view.components.button\n  (:require [reagent.core :as reagent]\n            [re-frame-project.view.style :as style]))\n\n(defn get-style\n  [button-type pressed hovered]\n  (condp = button-type\n    :secondary {:border-width     \"2px\"\n                :cursor           \"pointer\"\n                :font-family      style/font\n                :font-weight      \"bold\"\n                :font-size        \"1.125rem\"\n                :line-height      \"1.5rem\"\n                :padding          \"4px 13px 4px 13px\"\n                :transition       \"all 200ms\"\n                :background-color (cond\n                                    pressed style/light-blue\n                                    hovered style/transparent\n                                    :else style/transparent)\n                :border-color     (cond\n                                    pressed style/light-blue\n                                    hovered style/navy\n                                    :else style/navy)\n                :box-shadow       (cond\n                                    pressed \"inset 0 0 0 1px #00325c\"\n                                    hovered \"inset 0 0 0 1px #00427a\"\n                                    :else \"none\")\n                :color            (cond\n                                    pressed style/dark-blue\n                                    hovered style/navy\n                                    :else style/navy)}\n    :warning {:border-width     \"2px\"\n                :cursor           \"pointer\"\n                :font-family      style/font\n                :font-weight      \"bold\"\n                :font-size        \"1.125rem\"\n                :line-height      \"1.5rem\"\n                :padding          \"4px 13px 4px 13px\"\n                :transition       \"all 200ms\"\n                :background-color (cond\n                                    pressed style/red\n                                    :else style/darker-red)\n                :border-color     style/darkest-red\n                :box-shadow       (cond\n                                    pressed \"inset 0 0 0 1px #00325c\"\n                                    hovered \"inset 0 0 0 1px #00427a\"\n                                    :else \"none\")\n                :color            style/white}\n    :filled {:width \"100%\"\n             :color            style/white\n             :cursor           \"pointer\"\n             :font-family      style/font\n             :font-weight      \"bold\"\n             :font-size        \"1.125rem\"\n             :line-height      \"1.5rem\"\n             :padding          \"6px 13px 6px 13px\"\n             :transition       \"all 200ms\"\n             :background-color (cond\n                                 pressed style/darker-red\n                                 hovered style/dark-blue\n                                 :else style/navy)\n             }\n    ; default to primary button\n    {                                                       ;:border           \"none\"\n     :color            style/white\n     :cursor           \"pointer\"\n     :font-family      style/font\n     :font-weight      \"bold\"\n     :font-size        \"1.125rem\"\n     :line-height      \"1.5rem\"\n     :padding          \"6px 13px 6px 13px\"\n     :transition       \"all 200ms\"\n     :background-color (cond\n                         pressed style/darker-red\n                         hovered style/dark-blue\n                         :else style/navy)}))\n\n(defn button [arg-map]\n  (let [local-state-atom (reagent/atom {:hovered false\n                                        :pressed false})]\n    (fn [{label :label on-click :on-click type :type button-type :button-type}]\n      (let [local-state (deref local-state-atom)]\n        [:button {:type (if type type \"button\")\n                  :style (get-style button-type (:pressed local-state) (:hovered local-state))\n                        :on-focus (fn [e] (js/console.log e))\n                        :on-blur (fn [] (println \"blur\"))\n                        :on-mouse-enter (fn [] (swap! local-state-atom assoc :hovered true))\n                        :on-mouse-leave (fn [] (swap! local-state-atom assoc :hovered false))\n                        :on-mouse-down (fn [] (swap! local-state-atom assoc :pressed true))\n                        :on-mouse-up (fn [] (swap! local-state-atom assoc :pressed false))\n                        :on-click on-click} label]))))\n\n"]}