{"version":3,"sources":["re_frame_project/view/app.cljs"],"mappings":";;;;;AAOA,AAAA,AAAMA,AACHC,AAAkBC;AADrB,AAEE,AAAI,AAACC,AAAEF,AAAkBC;AAAzB,AAAA,AAAA,AAAA,AACgB,AAACE,AACd,AAACC,AAAM,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAACC,AAAAA,AAAAA;;;AAFX,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAGgB,AAACH,AACP,AAAA,AAAKH,AACXD,AACA,AAAA,AAAKC,AACLC;;;AAEN,AAAA,AAAMM,AAAQC,AAAMC,AAAMC,AAAIC,AAAIC;AAAlC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACqCH,AAAWC,AAASC,AAAUC,AAE7C,AAAKC;AAAL,AACE,AAAAC,AAAA,AAAA,AAAmBN,AAAM,AAAA,AAAIK;AAA7B,AAAA,AAAAC,AAAAA,AAACC,AAAAA,AAAAA;;;AAEzB,AAAA,AAAMC,AACHP;AADH,AAEE,AAAA,AAAKA;;AAEP,AAAA,AAAMQ;AAAN,AAEE,AAAMC,AAAW,AAACd,AAAM,AAAAe,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAACb,AAAAA,AAAAA;;AACnBc,AAAM,AAAChB,AAAM,AAAAiB,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAACf,AAAAA,AAAAA;;AADpB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAKqDY,AACnDX,AAAmB,AAAA,AAAKW,AACxBI;;AAPF,AASwB,AAAAC,AAAA,AAAA,AAAA,AAAkCP;AAAlC,AAAA,AAAAO,AAAAA,AAACR,AAAAA,AAAAA;;AATzB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAWgDK,AAC9Cb,AAAc,AAAA,AAAKa,AACnBE;;AAbF,AAewB,AAAAE,AAAA,AAAA,AAAA,AAA6BR;AAA7B,AAAA,AAAAQ,AAAAA,AAACT,AAAAA,AAAAA;;AAfzB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAiBoE,AAAK,AAAAU,AAAY,AAAGP,AAAWE;AAA1B,AAAA,AAAAK,AAACC;AAjB1E,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAiBoE,AAElEJ;;AAnBF,AAqBwB,AAAAK,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAACZ,AAAAA,AAAAA;;;;AAE3B,AAAA,AAAMa;AAAN,AAEE,AAAAC,AAAyB,AAACE,AAAK,AAAC3B,AAAM,AAAA4B,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAAC1B,AAAAA,AAAAA;;AAAvC,AAAAwB,AAAAD,AAAA,AAAA,AAAOX;AAAP,AAAAY,AAAAD,AAAA,AAAA,AAAkBT;AACZa,AAAc,AAAA,AAACC,AAAQ,AAAA,AAAK,AAAA,AAAKhB;AACjCiB,AAAe,AAACC,AAAc,AAAA,AAAKhB,AAAOa;AAFhD,AAIM,AAACI,AACC,AAACC,AAAI;AAAKC;AAAL,AAAA,AAAA,AAAA,AAAA,AACU,AAACC,AAAMD,AACbxC,AACC,AAACyC,AAAMD,AACP,AAACE,AAAKF;;AACVJ;;AAEhB,AAAA,AAAMO;AAAN,AAAA,AAAA,AAAA,AAGOzB,AACD,AAACW","names":["re-frame-project.view.app/form-1-component","this-component-id","last-id","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","re-frame-project.view.style/component-style","cljs.core/deref","G__39999","re-frame.core/subscribe","re-frame-project.view.app/slider","param","value","min","max","step","e","G__40000","re-frame.core/dispatch","re-frame-project.view.app/double-up","re-frame-project.view.app/text-and-buttons","components","G__40001","depth","G__40002","re-frame-project.view.components.button/button","G__40003","G__40004","G__40005","Math/floor","G__40006","re-frame-project.view.app/component-tree","vec__40007","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","cljs.core/vals","G__40010","component-ids","cljs.core.range.cljs$core$IFn$_invoke$arity$2","partitionedIds","cljs.core.partition_all.cljs$core$IFn$_invoke$arity$2","cljs.core.doall.cljs$core$IFn$_invoke$arity$1","cljs.core.map.cljs$core$IFn$_invoke$arity$2","child-component-ids","cljs.core/first","cljs.core/last","re-frame-project.view.app/root"],"sourcesContent":["(ns re-frame-project.view.app\n  (:require\n    [re-frame.core :refer [dispatch\n                           subscribe]]\n    [re-frame-project.view.style :refer [component-style]]\n    [re-frame-project.view.components.button :refer [button]]))\n\n(defn form-1-component\n  [this-component-id last-id]\n  (if (= this-component-id last-id)\n    [:div {:style (component-style)}\n     (deref (subscribe [:get-shared-value]))]\n    [:div {:style (component-style)}\n     ^{:key (inc this-component-id)}\n     [form-1-component\n      (inc this-component-id)\n      last-id]]))\n\n(defn slider [param value min max step]\n  [:input {:type      \"range\" :value value :min min :max max :step step\n           :style     {:width \"100%\"}\n           :on-change (fn [e]\n                        (dispatch [:change param (.. e -target -value)]))}])\n\n(defn double-up\n  [value]\n  (* 2 value))\n\n(defn text-and-buttons\n  []\n  (let [components (deref (subscribe [:get-components]))\n        depth (deref (subscribe [:get-depth]))]\n  [:div#container-for-buttons\n   [:h1 {:style {:text-align \"center\"}} \"Re-Frame Application State Measurement (Independent)\"]\n\n   [:div {:style {:text-align \"center\"}} \"Components \" components]\n   [slider :components (int components) 1 2048 1]\n   [button {:label       \"Double components\"\n            :button-type :filled\n            :on-click    #(dispatch [:double-up :components double-up])}]\n\n   [:div {:style {:text-align \"center\"}} \"Depth \" depth]\n   [slider :depth (int depth) 1 2048 1]\n   [button {:label       \"Double depth\"\n            :button-type :filled\n            :on-click    #(dispatch [:double-up :depth double-up])}]\n\n   [:div {:style {:text-align \"center\"}} \"Affected leaf components: \" (int (Math/floor (/ components depth)))]\n\n   [button {:label       \"Increment Shared\"\n            :button-type :filled\n            :on-click    #(dispatch [:increment-shared-value])}]]))\n\n(defn component-tree\n  []\n  (let [[components depth] (vals (deref (subscribe [:get-state])))\n        component-ids (range 1 (inc (int components)))\n        partitionedIds (partition-all (int depth) component-ids)]\n        \n        (doall \n          (map (fn [child-component-ids]\n                  ^{:key (first child-component-ids)}\n                  [form-1-component\n                    (first child-component-ids)\n                    (last child-component-ids)]) \n                partitionedIds))))\n\n(defn root\n  []\n  [:div#root-div\n      [text-and-buttons]\n      (component-tree)\n      ])"]}