{"version":3,"sources":["re_frame_project/view/app.cljs"],"mappings":";;;;;AAOA,AAAA,AAAMA,AACHC,AAAkBC;AADrB,AAEE,AAAI,AAACC,AAAEF,AAAkBC;AAAzB,AAAA,AAAA,AAAA,AACgB,AAACE,AACd,AAAGH,AAAkB,AAACI,AAAM,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAACC,AAAAA,AAAAA;;;AAFhC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAGgB,AAACH,AACP,AAAA,AAAKH,AACXD,AACA,AAAA,AAAKC,AACLC;;;AAEN,AAAA,AAAMM;AAAN,AAAA,AAAA,AAAA,AAAA,AAEgB,AAACJ,AACd,AAACC,AAAM,AAAAI,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAACF,AAAAA,AAAAA;;;AAEX,AAAA,AAAMG,AAAQC,AAAMC,AAAMC,AAAIC,AAAIC;AAAlC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACqCH,AAAWC,AAASC,AAAUC,AAE7C,AAAKC;AAAL,AACE,AAAAC,AAAA,AAAA,AAAmBN,AAAM,AAAA,AAAIK;AAA7B,AAAA,AAAAC,AAAAA,AAACC,AAAAA,AAAAA;;;AAEzB,AAAA,AAAMC,AACHP;AADH,AAEE,AAAA,AAAKA;;AAEP,AAAA,AAAMQ,AACHC,AAAWC;AADd,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAKuDD,AACnDX,AAAmB,AAAA,AAAKW,AACxBE;AAPJ,AAS0B,AAAAC,AAAA,AAAA,AAAA,AAAkCL;AAAlC,AAAA,AAAAK,AAAAA,AAACN,AAAAA,AAAAA;AAT3B,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAWkDI,AAC9CZ,AAAc,AAAA,AAAKY,AACnBC;AAbJ,AAe0B,AAAAE,AAAA,AAAA,AAAA,AAA6BN;AAA7B,AAAA,AAAAM,AAAAA,AAACP,AAAAA,AAAAA;AAf3B,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAiBsE,AAAK,AAAAQ,AAAY,AAAGL,AAAWC;AAA1B,AAAA,AAAAI,AAACC;AAjB5E,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAiBsE,AAElEJ;AAnBJ,AAqB0B,AAAAK,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAACV,AAAAA,AAAAA;;;AAE3B,AAAA,AAAMW;AAAN,AAEE,AAAAC,AAAyB,AAACE,AAAK,AAAC3B,AAAM,AAAA4B,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAAC1B,AAAAA,AAAAA;;AAAvC,AAAAwB,AAAAD,AAAA,AAAA,AAAOT;AAAP,AAAAU,AAAAD,AAAA,AAAA,AAAkBR;AACZY,AAAc,AAAA,AAACC,AAAQ,AAAA,AAAK,AAAA,AAAKd;AADvC,AAAA,AAAA,AAAA,AAIID,AAAiBC,AAAWC,AAGxB,AAACe,AAAI,AAKL,AAACI;AALSH;AAAL,AAAA,AAAA,AAAA,AAAA,AACS,AAACC,AAAMD,AACbtC,AACA,AAACuC,AAAMD,AACP,AAACE,AAAKF;;AALd,AAACF,AAAc,AAAA,AAAKd,AAAOY","names":["re-frame-project.view.app/form-1-component","this-component-id","last-id","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","re-frame-project.view.style/component-style","cljs.core/deref","G__51961","re-frame.core/subscribe","re-frame-project.view.app/test-component","G__51970","re-frame-project.view.app/slider","param","value","min","max","step","e","G__51976","re-frame.core/dispatch","re-frame-project.view.app/double-up","re-frame-project.view.app/text-and-buttons","components","depth","re-frame-project.view.components.button/button","G__51988","G__51992","G__51998","Math/floor","G__52003","re-frame-project.view.app/global-state-app","vec__52005","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","cljs.core/vals","G__52008","component-ids","cljs.core.range.cljs$core$IFn$_invoke$arity$2","cljs.core.partition_all.cljs$core$IFn$_invoke$arity$2","cljs.core.map.cljs$core$IFn$_invoke$arity$2","child-component-ids","cljs.core/first","cljs.core/last","cljs.core.doall.cljs$core$IFn$_invoke$arity$1"],"sourcesContent":["(ns re-frame-project.view.app\n  (:require\n    [re-frame.core :refer [dispatch\n                           subscribe]]\n    [re-frame-project.view.style :refer [component-style]]\n    [re-frame-project.view.components.button :refer [button]]))\n\n(defn form-1-component\n  [this-component-id last-id]\n  (if (= this-component-id last-id)\n    [:div {:style (component-style)}\n     (+ this-component-id (deref (subscribe [:shared-value])))]\n    [:div {:style (component-style)}\n     ^{:key (inc this-component-id)}\n     [form-1-component\n      (inc this-component-id)\n      last-id]]))\n\n(defn test-component\n  []\n  [:div {:style (component-style)}\n   (deref (subscribe [:shared-value]))])\n\n(defn slider [param value min max step]\n  [:input {:type      \"range\" :value value :min min :max max :step step\n           :style     {:width \"100%\"}\n           :on-change (fn [e]\n                        (dispatch [:change param (.. e -target -value)]))}])\n\n(defn double-up\n  [value]\n  (* 2 value))\n\n(defn text-and-buttons\n  [components depth]\n  [:div\n   [:h1 {:style {:text-align \"center\"}} \"Re-Frame Application State Measurement (Independent)\"]\n\n   [:div {:style {:text-align \"center\"}} \"Components \" components]\n   [slider :components (int components) 1 2048 1]\n   [button {:label       \"Double components\"\n            :button-type :filled\n            :on-click    #(dispatch [:double-up :components double-up])}]\n\n   [:div {:style {:text-align \"center\"}} \"Depth \" depth]\n   [slider :depth (int depth) 1 2048 1]\n   [button {:label       \"Double depth\"\n            :button-type :filled\n            :on-click    #(dispatch [:double-up :depth double-up])}]\n\n   [:div {:style {:text-align \"center\"}} \"Affected leaf components: \" (int (Math/floor (/ components depth)))]\n\n   [button {:label       \"Increment Shared\"\n            :button-type :filled\n            :on-click    #(dispatch [:increment-shared-value])}]])\n\n(defn global-state-app\n  []\n  (let [[components depth] (vals (deref (subscribe [:state])))\n        component-ids (range 1 (inc (int components)))]\n    [:div#root\n\n     [text-and-buttons components depth]\n\n     (->> (partition-all (int depth) component-ids)\n          (map (fn [child-component-ids]\n                 ^{:key (first child-component-ids)}\n                 [form-1-component\n                  (first child-component-ids)\n                  (last child-component-ids)]))\n          (doall)\n          )]\n    ))"]}