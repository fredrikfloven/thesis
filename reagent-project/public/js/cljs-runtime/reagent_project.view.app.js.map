{"version":3,"sources":["reagent_project/view/app.cljs"],"mappings":";;;;;AAMA,AAAA,AAAMA,AACHC,AAAkBC,AAAQC;AAD7B,AAEE,AAAI,AAACC,AAAEH,AAAkBC;AAAzB,AAAA,AAAA,AAAA,AACgB,AAACG,AACd,AAAGJ,AAAkBE;;AAFxB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAGgB,AAACE,AACP,AAAA,AAAKJ,AACXD,AACA,AAAA,AAAKC,AACLC,AACAC;;;AAGN,AAAA,AAAMG,AACHH;AADH,AAAA,AAAA,AAAA,AAAA,AAEgB,AAACE,AACdF;;AAGH,AAAA,AAAAI,AAAAC,AAAAC,AAAAC;AAAA;AAAA,AAAA,AAASC,AAAW,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACC;;AAIrB,AAAA,AAAMC,AAAQC,AAAMC,AAAMC,AAAIC,AAAIC;AAAlC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACqCH,AAAWC,AAASC,AAAUC,AAE7C,AAAKC;AAAL,AACE,AAACC,AAAMT,AAAWU,AAAMP,AAAM,AAAA,AAAIK;;;AAE1D,AAAA,AAAMG,AACHP;AADH,AAEE,AAAA,AAAKA;;AAEP,AAAA,AAAMQ,AACHC,AAAWC;AADd,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAKuDD,AACnDX,AAAmB,AAAA,AAAKW,AACxBE;AAPJ,AAS0B,AAAA,AAAA,AAACN,AAAMT,AAAWgB,AAAwBL;AATpE,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAWkDG,AAC9CZ,AAAc,AAAA,AAAKY,AACnBC;AAbJ,AAe0B,AAAA,AAAA,AAACN,AAAMT,AAAWgB,AAAmBL;AAf/D,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAiBsE,AAAK,AAAAM,AAAY,AAAGJ,AAAWC;AAA1B,AAAA,AAAAG,AAACC;AAjB5E,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAiBsE,AAElEH;AAnBJ,AAqB0B,AAAA,AAAA,AAACN,AAAMT,AAAWgB,AAA0BG;;;AAEtE,AAAA,AAAMC;AAAN,AAEE,AAAAC,AAAsC,AAACE,AAAK,AAACC,AAAMxB;AAAnD,AAAAsB,AAAAD,AAAA,AAAA,AAAOR;AAAP,AAAAS,AAAAD,AAAA,AAAA,AAAkBP;AAAlB,AAAAQ,AAAAD,AAAA,AAAA,AAAwB7B;AAClBiC,AAAc,AAAA,AAACC,AAAQ,AAAA,AAAK,AAAA,AAAKb;AADvC,AAAA,AAAA,AAAA,AAIID,AAAiBC,AAAWC,AAGxB,AAACc,AAAI,AAML,AAACI;AANSH;AAAL,AAAA,AAAA,AAAA,AAAA,AACS,AAACC,AAAMD,AACbxC,AACA,AAACyC,AAAMD,AACP,AAACE,AAAKF,AACNrC;;AANR,AAACmC,AAAc,AAAA,AAAKb,AAAOW","names":["reagent-project.view.app/form-1-component","this-component-id","last-id","shared-value","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","reagent-project.view.style/component-style","reagent-project.view.app/test-component","js/reagent-project","js/reagent-project.view","js/reagent-project.view.app","js/reagent-project.view.app.state-atom","reagent-project.view.app/state-atom","reagent.core.atom.cljs$core$IFn$_invoke$arity$1","reagent-project.view.app/slider","param","value","min","max","step","e","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc","reagent-project.view.app/double-up","reagent-project.view.app/text-and-buttons","components","depth","reagent-project.view.components.button/button","cljs.core/update-in","G__49194","Math/floor","cljs.core/inc","reagent-project.view.app/relative-state-app","vec__49198","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","cljs.core/vals","cljs.core/deref","component-ids","cljs.core.range.cljs$core$IFn$_invoke$arity$2","cljs.core.partition_all.cljs$core$IFn$_invoke$arity$2","cljs.core.map.cljs$core$IFn$_invoke$arity$2","child-component-ids","cljs.core/first","cljs.core/last","cljs.core.doall.cljs$core$IFn$_invoke$arity$1"],"sourcesContent":["(ns reagent-project.view.app\n  (:require\n   [reagent.core :as r]\n   [reagent-project.view.style :refer [component-style]]\n   [reagent-project.view.components.button :refer [button]]))\n\n(defn form-1-component\n  [this-component-id last-id shared-value]\n  (if (= this-component-id last-id)\n    [:div {:style (component-style)}\n     (+ this-component-id shared-value)]\n    [:div {:style (component-style)}\n     ^{:key (inc this-component-id)}\n     [form-1-component\n      (inc this-component-id)\n      last-id\n      shared-value]]))\n\n\n(defn test-component\n  [shared-value]\n  [:div {:style (component-style)}\n   shared-value])\n\n\n(defonce state-atom (r/atom {:components   2\n                                        :depth        2\n                                        :shared-value 0}))\n\n(defn slider [param value min max step]\n  [:input {:type      \"range\" :value value :min min :max max :step step\n           :style     {:width \"100%\"}\n           :on-change (fn [e]\n                        (swap! state-atom assoc param (.. e -target -value)))}])\n\n(defn double-up\n  [value]\n  (* 2 value))\n\n(defn text-and-buttons\n  [components depth]\n  [:div\n   [:h1 {:style {:text-align \"center\"}} \"Reagent Application State Measurement (Inherited) \"]\n\n   [:div {:style {:text-align \"center\"}} \"Components \" components]\n   [slider :components (int components) 1 5000 1]\n   [button {:label       \"Double components\"\n            :button-type :filled\n            :on-click    #(swap! state-atom update-in [:components] double-up)}]\n\n   [:div {:style {:text-align \"center\"}} \"Depth \" depth]\n   [slider :depth (int depth) 1 5000 1]\n   [button {:label       \"Double depth\"\n            :button-type :filled\n            :on-click    #(swap! state-atom update-in [:depth] double-up)}]\n\n   [:div {:style {:text-align \"center\"}} \"Affected leaf components: \" (int (Math/floor (/ components depth)))]\n\n   [button {:label       \"Increment Shared\"\n            :button-type :filled\n            :on-click    #(swap! state-atom update-in [:shared-value] inc)}]])\n\n(defn relative-state-app\n  []\n  (let [[components depth shared-value] (vals (deref state-atom))\n        component-ids (range 1 (inc (int components)))]\n    [:div#root\n\n     [text-and-buttons components depth]\n\n     (->> (partition-all (int depth) component-ids)\n          (map (fn [child-component-ids]\n                 ^{:key (first child-component-ids)}\n                 [form-1-component\n                  (first child-component-ids)\n                  (last child-component-ids)\n                  shared-value]))\n          (doall)\n          )]\n    )\n  )"]}